name: Deploy to EC2 (on merge develop -> main)

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  APP_DIR: /home/${{ secrets.EC2_USER }}/app
  JAR_NAME: app.jar
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

jobs:
  deploy:
    if: >
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'main' &&
      github.event.pull_request.head.ref == 'develop' &&
      github.repository_owner == 'rlagycks'
    runs-on: ubuntu-latest
    concurrency:
      group: manil-deploy
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build jar (skip tests)
        run: ./gradlew clean bootJar -x test

      - name: Check built jar
        run: ls -al build/libs

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ secrets.AWS_REGION }}

      - name: Who am I (debug)
        run: |
          aws --version
          aws sts get-caller-identity
          aws ec2 describe-security-groups --group-ids ${{ secrets.AWS_SG_ID }} --query 'SecurityGroups[0].GroupName'

      - name: Open SSH on SG to runner IP
        id: open_sg
        run: |
          IP=$(curl -s https://checkip.amazonaws.com)/32
          echo "runner_ip=$IP" >> $GITHUB_OUTPUT
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_ID }} \
            --ip-permissions IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges="[{CidrIp=$IP,Description='gh-runner'}]" || true

      - name: Write SSH key (from base64)
        run: |
          echo "${{ secrets.EC2_SSH_KEY_B64 }}" | base64 -d > key.pem
          tr -d '\r' < key.pem > key.clean && mv key.clean key.pem
          chmod 600 key.pem
          ssh-keygen -lf key.pem >/dev/null

      - name: Ensure app dir on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "\
              mkdir -p ${APP_DIR} && ls -al ${APP_DIR}"

      - name: Upload jar
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no \
            build/libs/*.jar \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ env.APP_DIR }}/${{ env.JAR_NAME }}

      - name: Restart service
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "\
              sudo systemctl restart manil && \
              sleep 2 && systemctl is-active manil"

      #  heredoc은 ssh 명령 '밖'에서 붙인다
      - name: Wait & Health check on EC2 (retry)
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'bash -se' <<'REMOTE'
          set -euo pipefail
          echo "[INFO] waiting for app to become healthy..."
          for i in {1..40}; do
            if curl -fsS http://localhost:8080/actuator/health >/dev/null; then
              echo "[INFO] health is UP"
              exit 0
            fi
            systemctl is-active manil || true
            journalctl -u manil -n 10 --no-pager || true
            sleep 3
          done
          echo "[ERROR] health check timeout"
          journalctl -u manil -n 200 --no-pager || true
          exit 1
          REMOTE

      - name: Close SSH on SG
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_ID }} \
            --ip-permissions IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges="[{CidrIp=${{ steps.open_sg.outputs.runner_ip }},Description='gh-runner'}]" || true