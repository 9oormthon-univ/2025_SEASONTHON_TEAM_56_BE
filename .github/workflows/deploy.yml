name: Deploy to EC2 (on merge develop -> main)

on:
  pull_request:
    types: [closed]          # PR이 닫힐 때(머지 포함) 트리거
    branches: [main]         # base=main 인 PR만

permissions:
  id-token: write            # OIDC 필수
  contents: read

env:
  APP_DIR: /home/${{ secrets.EC2_USER }}/app
  JAR_NAME: app.jar

jobs:
  deploy:
    # PR이 '머지' 되었고, base=main, head=develop, 내 포크 레포일 때만 실행
    if: >
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'main' &&
      github.event.pull_request.head.ref == 'develop' &&
      github.repository_owner == 'rlagycks'
    runs-on: ubuntu-latest
    concurrency:
      group: manil-deploy
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build jar (skip tests)
        run: ./gradlew clean bootJar -x test

      - name: Check built jar
        run: ls -al build/libs

      # --- OIDC로 AWS 임시 크레덴셜 획득 ---
      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}   # 예: arn:aws:iam::123456789012:role/manil_oidc
          aws-region:     ${{ secrets.AWS_REGION }}     # 예: ap-northeast-2

      - name: Who am I (debug)
        run: |
          aws --version
          aws sts get-caller-identity
          aws ec2 describe-security-groups --group-ids ${{ secrets.AWS_SG_ID }} --query 'SecurityGroups[0].GroupName'

      # --- 러너 IP를 22/tcp에 임시 허용 ---
      - name: Open SSH on SG to runner IP
        id: open_sg
        run: |
          IP=$(curl -s https://checkip.amazonaws.com)/32
          echo "runner_ip=$IP" >> $GITHUB_OUTPUT
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_ID }} \
            --ip-permissions IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges="[{CidrIp=$IP,Description='gh-runner'}]" || true

      # --- SSH 키 작성 (EC2로 scp/ssh) ---
      - name: Write SSH key
        run: |
          printf '%s' "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Ensure app dir on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "\
              mkdir -p /home/${{ secrets.EC2_USER }}/app && \
              ls -al /home/${{ secrets.EC2_USER }}/app"

      - name: Upload jar
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no \
            build/libs/*.jar \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ env.APP_DIR }}/${{ env.JAR_NAME }}

      - name: Restart service
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "\
              sudo systemctl restart manil && \
              sleep 3 && systemctl is-active manil"

      - name: Health check on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "\
              curl -fsS http://localhost:8080/actuator/health || (journalctl -u manil -n 100 --no-pager; exit 1)"

      # --- 항상 SG 규칙 원복 ---
      - name: Close SSH on SG
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_ID }} \
            --ip-permissions IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges="[{CidrIp=${{ steps.open_sg.outputs.runner_ip }},Description='gh-runner'}]" || true